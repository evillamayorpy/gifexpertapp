{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","find","cat","alert","type","value","onChange","target","style","color","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchgifs","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mNA+CeA,EA5CK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEHC,mBAAS,IAFN,mBAEhCC,EAFgC,KAEpBC,EAFoB,KAyBvC,OACI,0BAAMC,SAlBW,SAAEC,GACnBA,EAAEC,iBAEGJ,EAAWK,OAAOC,OAAS,IAC5BR,GAAe,SAAAS,GAEX,OADeA,EAAKC,MAAM,SAAAC,GAAG,OAAIA,IAAQT,MAErCU,MAAM,0BACCH,GAEL,CAAGP,GAAT,mBAAwBO,OAE5BN,EAAc,OAOd,2BACIU,KAAK,OACLC,MAAQZ,EACRa,SA1Bc,SAACV,GACvBF,EAAeE,EAAEW,OAAOF,UA4BfZ,EAAWM,OAAS,GAAKN,EAAWM,OAAS,GAC9C,0BAAMS,MAAO,CAACC,MAAO,QAArB,yC,uBCnCHC,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAWH,GAF/C,+DAGAI,MAAOF,GAHP,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KACFC,EAAOD,EAAKE,KAAM,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATvB,kBAYZM,GAZY,4CAAH,sDCULO,EAVK,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAE9B,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAMf,EAAMgB,IAAMN,IACvB,2BAAKA,KCuBFO,EA1BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAN,SAAEA,GAAe,IAAD,EAEdnB,mBAAS,CAC/B0B,KAAM,GACNa,SAAS,IAJ2B,mBAEjCC,EAFiC,KAE1BC,EAF0B,KAmBxC,OAZAC,qBAAW,WACPxB,EAASC,GACJwB,MAAM,SAAAC,GAEHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAAEpB,IAEEqB,EDhB0BK,CAAc1B,GAAlCa,EAHiB,EAGtBN,KAAaa,EAHS,EAGTA,QAErB,OACI,oCACI,wBAAIJ,UAAU,0CAAd,IAA0DhB,EAA1D,KAEEoB,GAAW,uBAAGJ,UAAU,yCAAb,cAEZ,yBAAKA,UAAU,aAERH,EAAOJ,KAAK,SAAAC,GAAG,OACP,kBAAC,EAAD,eACIiB,IAAMjB,EAAIC,IACLD,UEWtBkB,EA3BM,WAAO,IAAD,EAEa/C,mBAAS,CAAC,cAFvB,mBAEhBgD,EAFgB,KAEJjD,EAFI,KAQvB,OACI,oCACI,4CAEA,kBAAC,EAAD,CAAaA,cAAgBA,IAE7B,6BAEA,4BAEQiD,EAAWpB,KAAK,SAAAlB,GAAG,OAAI,kBAAC,EAAD,CAASoC,IAAMpC,EAAMS,SAAWT,UCjB3EuC,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.3bb00383.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value );\n    }\n\n    const handleSubmit = ( e ) => {\n        e.preventDefault();\n\n        if ( inputValue.trim().length > 2 ) {\n            setCategories( cats => {\n                const exists = cats.find( cat => cat === inputValue);\n                if (exists) {\n                    alert('Ya existe ese elemento');\n                    return cats;\n                }\n                return [ inputValue, ...cats];\n            });\n            setInputValue('');\n        }\n\n    }\n\n    return (\n        <form onSubmit={ handleSubmit }>\n            <input \n                type=\"text\"\n                value={ inputValue }\n                onChange={ handleInputChange }\n            />\n            {\n                (inputValue.length > 0 && inputValue.length < 3) &&\n                <span style={{color: 'red'}}>Debe ingresar al menos 3 caracteres</span>\n            }\n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\n\nexport const getGifs = async( category ) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category ) }&limit=10&api_key=jjj4anF6gWKf7lJZD2qDITegbRW3F039`;        \n    const resp = await fetch( url );\n    const { data } = await resp.json();\n    const gifs = data.map ( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n    return gifs;\n}","import React from 'react'\n\nconst GifGridItem = ({ id, title, url }) => {\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={ url } alt={ title } />\n            <p>{ title }</p>\n        </div>\n    )\n}\n\nexport default GifGridItem;","import React/* , { useState, useEffect } */ from 'react'\nimport { useFetchgifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n\n\n    const { data:images, loading } = useFetchgifs( category );\n\n    return (\n        <>\n            <h3 className=\"card animate__animated animate__fadeIn\"> { category } </h3>\n\n            { loading && <p className=\"card animate__animated animate__flash\">Loading...</p> }\n\n            {<div className=\"card-grid\">\n                {\n                    images.map( img => \n                            <GifGridItem \n                                key={ img.id }\n                                { ...img }\n                            />\n                    )\n                } \n                \n            </div>}\n        </>\n    )\n}\n\nexport default GifGrid;\n","import { useState, useEffect } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\n\nexport const useFetchgifs = ( category ) => {\n    \n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    useEffect( () =>  {\n        getGifs( category )\n            .then( imgs => {\n                \n                setState({\n                    data: imgs,\n                    loading: false\n                });\n\n            });\n    }, [ category ]);\n\n    return state; //{ data:[], loading: true }\n\n}","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    /* const handleAdd = () => {\n        setCategories([ 'Nuevo Elemento', ...categories]);\n    } */\n\n    return (\n        <>\n            <h2>GifExpertApp</h2>\n            \n            <AddCategory setCategories={ setCategories } />\n            \n            <hr />\n\n            <ol>\n                {\n                    categories.map( cat => <GifGrid key={ cat } category={ cat } />)\n                }\n            </ol>\n\n        </>\n    );\n\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}